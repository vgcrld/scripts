ora_env_capture () {

	#-------------------------------------------------------------
	# Get the parms
	#-------------------------------------------------------------
	set_parms "-oradbuser" $*

	#-------------------------------------------------------------
	# Switch the user to $orauser
	#-------------------------------------------------------------
	switch_user $oradbuser

	#-------------------------------------------------------------
	# Setup the user profile 
	#-------------------------------------------------------------
	logIt "Set profile ${HOME}/.profile"
	. ${HOME}/.profile > /dev/null 2>&1 
	set_RC $? stop
	
	#-------------------------------------------------------------
	# If ORACLE_SID is found then get the archive dir location
	#-------------------------------------------------------------
	if [[ -z ${ORACLE_SID} ]]  ; then 
		logIt "ERROR:The oracle SID is not set.  Check the environment."
		set_RC 1 stop
	else 

	  SQLCMD 'archive log list;' 
          arch_dest=`awk '/Archive destination/ { print $3 }' $SQLTEMP`
          
          # check for where the ARCHIVE logs are in ASM or Filesystem 
          if [[ "$arch_dest" = "USE_DB_RECOVERY_FILE_DEST" ]] ; then 
              SQLTEMP_HOLD=$SQLTEMP
              SQLCMD "select value from v\$parameter where name ='db_recovery_file_dest';"
	      set_RC $? stop
              arch_dest_mount=`tail -2 $SQLTEMP |head -1`
              ctlcopy1=$arch_dest_mount/CTL
              ctlcopy2=$arch_dest_mount/PROXYCTL
            
          else
             arch_dest_mount=`df $arch_dest | awk '$7 ~ /\/.+/ {print $7}'`
             ctlcopy1=$arch_dest_mount/${ORACLE_SID}/ctl
             ctlcopy2=$arch_dest_mount/${ORACLE_SID}/startctl
 
             [[ ! -d $ctlcopy1 ]] && mkdir -p $ctlcopy1
             [[ ! -d $ctlcopy2 ]] && mkdir -p $ctlcopy2

          fi

     	  logIt "Archive log destination..........: $arch_dest"
          logIt "Archive log destination mount....: $arch_dest_mount"
	  logIt "Bkup ctl file bkup destination...: $ctlcopy1"
	  logIt "Bkup ctl file start destination..: $ctlcopy2"
        fi

        #-------------------------------------------------------------
        # Adjust the environment file on the saas share/NFS
        #-------------------------------------------------------------
	env | awk '/^PATH=/ { print "export "$0 }' > $LOG_PATH/${ORACLE_SID}.env
	env | awk '/^ORACLE_HOME=/ { print "export "$0 }' >> $LOG_PATH/${ORACLE_SID}.env
	env | awk '/^ORACLE_SID=/ { print "export "$0 }' >> $LOG_PATH/${ORACLE_SID}.env
	env | awk '/^TNS_ADMIN=/ { print "export "$0 }' >> $LOG_PATH/${ORACLE_SID}.env
	env | awk '/^LIBPATH/ { print "export "$0 }' >> $LOG_PATH/${ORACLE_SID}.env
	env | awk '/^LD_LIBRARY_PATH/ { print "export "$0 }' >> $LOG_PATH/${ORACLE_SID}.env

	echo export CTLCOPY1=$ctlcopy1/controlfile.ctl >> $LOG_PATH/${ORACLE_SID}.env
	echo export CTLCOPY2=$ctlcopy2/controlfile.ctl >> $LOG_PATH/${ORACLE_SID}.env

        #-------------------------------------------------------------
        # get the Instance's DBNAME in RAC DBNAME + Instance prefix 
        #-------------------------------------------------------------
        SQLCMD "select value from v\$parameter where name ='db_name';"
	set_RC $? stop
        dbname=`tail -2 $SQLTEMP |head -1`
        echo  "export DB_NAME=${dbname}" >> $LOG_PATH/${ORACLE_SID}.env


        #-------------------------------------------------------------
        # Make sure that the init<SID>.ora is current
        #-------------------------------------------------------------
        logIt "Create PROXY DB pfile from spfile"
        SQLCMD "create pfile='${ORACLE_HOME}/dbs/init${ORACLE_SID}.ora.proxy' from spfile;"
        set_RC $? stop
  
        echo "export PROXY_PFILE=${ORACLE_HOME}/dbs/init${ORACLE_SID}.ora.proxy" >> $LOG_PATH/${ORACLE_SID}.env
	logIt "Proxy PFILE is set to: PROXY_PFILE=${ORACLE_HOME}/dbs/init${ORACLE_SID}.ora.proxy"
        
}
